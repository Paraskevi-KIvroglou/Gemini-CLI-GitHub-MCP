name: Auto Update Docs with Gemini CLI + MCP

on:
  push:
    branches:
      - 2-versatile-use
  workflow_dispatch:
      
jobs:
  update-docs:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Configure MCP Server
        shell: pwsh
        run: |
          New-Item -Path $env:USERPROFILE\.gemini -ItemType Directory -Force
          $json = @'
          {
            "mcpServers": {
              "github": {
                "command": "npx",
                "args": ["-y", "@modelcontextprotocol/server-github"],
                "env": {
                  "GITHUB_PERSONAL_ACCESS_TOKEN": "${{ secrets.PERSONAL_ACCESS_TOKEN }}"
                }
              }
            }
          }
          '@
          $json | Set-Content -Path $env:USERPROFILE\.gemini\settings.json
    
      - name: Clean npm cache
        run: npm cache clean --force
        shell: pwsh

      - name: Install Gemini CLI
        run: npm install -g @google/gemini-cli
        shell: pwsh

      - name: Generate Documentation
        shell: pwsh
        run: |
          # Create necessary directories
          New-Item -Path "scripts" -ItemType Directory -Force
          
          # Run the documentation generation script
          if (Test-Path "scripts/generate-docs.js") {
            node scripts/generate-docs.js
          } else {
            Write-Host "üìù Note: Gemini CLI is primarily interactive."
            Write-Host "üîß For automated documentation generation, consider:"
            Write-Host "   - Using the Gemini API directly"
            Write-Host "   - Creating a custom MCP server"
            Write-Host "   - Using tools like JSDoc, TypeDoc, or similar"
            
            # Create placeholder documentation
            New-Item -Path "docs" -ItemType Directory -Force
            "# Auto-generated Documentation`n`nGenerated on: $(Get-Date)`n`nThis is a placeholder. Set up proper documentation generation." | Out-File -FilePath "docs/README.md" -Encoding UTF8
          }

      - name: Commit and Push Documentation
        shell: pwsh
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add docs/
          git commit -m "Auto-update docs with Gemini CLI + MCP" || echo "No changes to commit"
          git push