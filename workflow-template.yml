# Template for Gemini CLI + MCP Documentation Workflow
# Copy this file to your repository and customize as needed

name: Auto Update Docs with Gemini CLI + MCP

on:
  push:
    branches:
      - main  # Change this to your default branch
  workflow_dispatch:
    inputs:
      input_dir:
        description: 'Input directory for documentation generation'
        required: false
        default: 'src/'  # Change this to your source directory
        type: string
      output_dir:
        description: 'Output directory for generated documentation'
        required: false
        default: 'docs/'  # Change this to your docs directory
        type: string
      branch_name:
        description: 'Branch to commit changes to'
        required: false
        default: 'main'  # Change this to your default branch
        type: string
      commit_message:
        description: 'Commit message for documentation updates'
        required: false
        default: 'Auto-update docs with Gemini CLI + MCP'
        type: string
      enable_auto_push:
        description: 'Enable automatic push to repository'
        required: false
        default: true
        type: boolean
      clean_cache:
        description: 'Clean npm cache before running'
        required: false
        default: true
        type: boolean
      
jobs:
  update-docs:
    runs-on: windows-latest  # Change to ubuntu-latest for Linux
    env:
      INPUT_DIR: ${{ github.event.inputs.input_dir || 'src/' }}
      OUTPUT_DIR: ${{ github.event.inputs.output_dir || 'docs/' }}
      BRANCH_NAME: ${{ github.event.inputs.branch_name || github.ref_name }}
      COMMIT_MESSAGE: ${{ github.event.inputs.commit_message || 'Auto-update docs with Gemini CLI + MCP' }}
      ENABLE_AUTO_PUSH: ${{ github.event.inputs.enable_auto_push || 'true' }}
      CLEAN_CACHE: ${{ github.event.inputs.clean_cache || 'true' }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}
          ref: ${{ env.BRANCH_NAME }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Configure MCP Server
        shell: pwsh
        run: |
          # Create .gemini directory
          New-Item -Path $env:USERPROFILE\.gemini -ItemType Directory -Force
          
          # Create MCP configuration
          $json = @{
            mcpServers = @{
              github = @{
                command = "npx"
                args = @("-y", "@modelcontextprotocol/server-github")
                env = @{
                  GITHUB_PERSONAL_ACCESS_TOKEN = "${{ env.PERSONAL_ACCESS_TOKEN }}"
                }
              }
            }
          } | ConvertTo-Json -Depth 10
          
          $json | Set-Content -Path $env:USERPROFILE\.gemini\settings.json
          
          # Verify configuration was created
          if (Test-Path $env:USERPROFILE\.gemini\settings.json) {
            Write-Host "MCP configuration created successfully"
          } else {
            Write-Error "Failed to create MCP configuration"
            exit 1
          }
    
      - name: Clean npm cache
        if: env.CLEAN_CACHE == 'true'
        run: npm cache clean --force
        shell: pwsh

      - name: Install Gemini CLI
        shell: pwsh
        run: |
          # Install Gemini CLI globally
          npm install -g @google/generative-ai-cli
          
          # Verify installation
          gemini --version
          
          # Install MCP server if not already available
          npx -y @modelcontextprotocol/server-github --version

      - name: Validate input directory
        shell: pwsh
        run: |
          if (Test-Path "${{ env.INPUT_DIR }}") {
            Write-Host "Input directory '${{ env.INPUT_DIR }}' exists"
            Get-ChildItem "${{ env.INPUT_DIR }}" | Measure-Object | ForEach-Object { Write-Host "Found $($_.Count) items in input directory" }
          } else {
            Write-Error "Input directory '${{ env.INPUT_DIR }}' does not exist"
            exit 1
          }

      - name: Generate Documentation
        shell: pwsh
        run: |
          # Create output directory if it doesn't exist
          New-Item -Path "${{ env.OUTPUT_DIR }}" -ItemType Directory -Force
          
          # Generate documentation
          gemini docs --input="${{ env.INPUT_DIR }}" --output="${{ env.OUTPUT_DIR }}" --use-mcp=github
          
          # Verify documentation was generated
          if (Test-Path "${{ env.OUTPUT_DIR }}") {
            Get-ChildItem "${{ env.OUTPUT_DIR }}" -Recurse | Measure-Object | ForEach-Object { 
              Write-Host "Generated $($_.Count) documentation files" 
            }
          } else {
            Write-Error "Documentation generation failed - output directory not found"
            exit 1
          }

      - name: Commit and Push Documentation
        if: env.ENABLE_AUTO_PUSH == 'true'
        shell: pwsh
        run: |
          # Configure git
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          
          # Check if there are changes to commit
          git add "${{ env.OUTPUT_DIR }}"
          $status = git status --porcelain
          
          if ($status) {
            Write-Host "Changes detected, committing..."
            git commit -m "${{ env.COMMIT_MESSAGE }}"
            git push origin "${{ env.BRANCH_NAME }}"
            Write-Host "Successfully pushed documentation updates"
          } else {
            Write-Host "No changes to commit"
          }

      - name: Create Summary
        shell: pwsh
        run: |
          Write-Host "## Documentation Generation Summary" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "- **Input Directory:** ${{ env.INPUT_DIR }}" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "- **Output Directory:** ${{ env.OUTPUT_DIR }}" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "- **Branch:** ${{ env.BRANCH_NAME }}" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "- **Auto Push:** ${{ env.ENABLE_AUTO_PUSH }}" >> $env:GITHUB_STEP_SUMMARY
          
          if (Test-Path "${{ env.OUTPUT_DIR }}") {
            $fileCount = (Get-ChildItem "${{ env.OUTPUT_DIR }}" -Recurse -File | Measure-Object).Count
            Write-Host "- **Files Generated:** $fileCount" >> $env:GITHUB_STEP_SUMMARY
          }

# =============================================================================
# CUSTOMIZATION GUIDE
# =============================================================================
#
# 1. REPOSITORY-SPECIFIC CHANGES:
#    - Change 'main' to your default branch name
#    - Update 'src/' to your source code directory
#    - Update 'docs/' to your documentation directory
#
# 2. REQUIRED SECRETS:
#    - PERSONAL_ACCESS_TOKEN: GitHub token with repo permissions
#    - GITHUB_TOKEN: Automatically provided
#
# 3. OPTIONAL CUSTOMIZATIONS:
#    - Change 'windows-latest' to 'ubuntu-latest' for Linux
#    - Modify commit message format
#    - Add conditional triggers (e.g., only on specific paths)
#
# 4. ADVANCED FEATURES:
#    - Add multiple documentation sets
#    - Configure custom MCP servers
#    - Set up different workflows for different branches
#
# ============================================================================= 